package com.kindergarten.workflow.web.controllers;

import com.kindergarten.workflow.data.ActionLogRepository;
import com.kindergarten.workflow.data.DocumentRepository;
import com.kindergarten.workflow.data.UserRepository;
import com.kindergarten.workflow.domain.*;
import com.kindergarten.workflow.services.LogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.validation.Valid;
import java.io.*;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Controller
@RequestMapping("documents")
public class DocumentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DocumentRepository documentRepository;

    @Autowired
    private ActionLogRepository actionLogRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private LogService logService;


    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping(path="/edit/{id}")
    public String editDocument(@AuthenticationPrincipal User user, @PathVariable Integer id, Model model)  {

        Optional<Document> doc = documentRepository.findById(id);
        if (doc.isPresent()) {
            Document document = doc.get();
            model.addAttribute("document", document);
            model.addAttribute("user", document);
            model.addAttribute("statuses", DocumentStatus.values());
            return "documentEdit";
        }
        return "redirect:/documents/all";
    }

    @PostMapping(path="/edit")
    public String saveEditDocument(
            @AuthenticationPrincipal User user,
            @RequestParam Map<String, String> form,
            @RequestParam("documentId") Document document,
            @RequestParam("file") MultipartFile file) throws IOException {
        String newStatus = form.get("newDocumentStatus");
        String oldStatus = document.getStatus().name();
        String oldAssignee = document.getAssignee().getInitials();
        if (!file.isEmpty()){

            saveFile(file, document);
            documentRepository.save(document);
            logService.CommitEvent(user, document, "Обновлен файл документа");
        }

        if (newStatus.equals(DocumentStatus.Зарегистрирован.name())){
            List<User> list = userRepository
                    .findAll()
                    .stream()
                    .filter(usr -> usr.getRoles().contains(Roles.Clerk))
                    .sorted(Comparator.comparingInt(value -> value.getDocuments().size()))
                    .collect(Collectors.toList());
            if (!list.isEmpty()){
                User clerk = list.get(list.size() - 1);
                document.setAssignee(clerk);
                document.setStatus(DocumentStatus.Зарегистрирован);
                documentRepository.save(document);

                logService.CommitEvent(user, document, "Сменен статус документа:" + oldStatus + "->" + newStatus);
                logService.CommitEvent(user, document, "Сменен ответветственный:" + oldAssignee + "->" + clerk.getInitials());
            }

        }
        if (newStatus.equals(DocumentStatus.НаУтверждении.name())){
            List<User> list = userRepository
                    .findAll()
                    .stream()
                    .filter(usr -> usr.getRoles().contains(Roles.Supervisor))
                    .sorted(Comparator.comparingInt(value -> value.getDocuments().size()))
                    .collect(Collectors.toList());

            if (!list.isEmpty()){
                User supervisor = list.get(list.size() - 1);
                document.setAssignee(supervisor);
                document.setStatus(DocumentStatus.НаУтверждении);
                documentRepository.save(document);

                logService.CommitEvent(user, document, "Сменен статус документа:" + oldStatus + "->" + newStatus);
                logService.CommitEvent(user, document, "Сменен ответветственный:" + oldAssignee + "->" + supervisor.getInitials());
            }
        }
        if (newStatus.equals(DocumentStatus.Заархивирован.name())){
            document.setAssignee(null);
            documentRepository.save(document);
        }
        if (newStatus.equals(DocumentStatus.НаИсполнении.name())){
            List<User> list = userRepository
                    .findAll()
                    .stream()
                    .filter(usr -> usr.getRoles().contains(Roles.Executor))
                    .sorted(Comparator.comparingInt(value -> value.getDocuments().size()))
                    .collect(Collectors.toList());
            if (!list.isEmpty()){
                User executor = list.get(list.size() - 1);
                document.setAssignee(executor);
                document.setStatus(DocumentStatus.НаИсполнении);
                documentRepository.save(document);

                logService.CommitEvent(user, document, "Сменен статус документа:" + oldStatus + "->" + newStatus);
                logService.CommitEvent(user, document, "Сменен ответветственный:" + oldAssignee + "->" + executor.getInitials());
            }
        }
        if (newStatus.equals(DocumentStatus.Выполнен.name())){
            List<User> list = userRepository
                    .findAll()
                    .stream()
                    .filter(usr -> usr.getRoles().contains(Roles.Clerk))
                    .sorted(Comparator.comparingInt(value -> value.getDocuments().size()))
                    .collect(Collectors.toList());
            if (!list.isEmpty()){
                User clerk = list.get(list.size() - 1);
                document.setAssignee(clerk);
                document.setStatus(DocumentStatus.Выполнен);
                documentRepository.save(document);

                logService.CommitEvent(user, document, "Сменен статус документа:" + oldStatus + "->" + newStatus);
                logService.CommitEvent(user, document, "Сменен ответветственный:" + oldAssignee + "->" + clerk.getInitials());
            }
        }

        return "redirect:/documents/all";
    }


    @GetMapping(path="/download/{id}")
    @ResponseBody
    public ResponseEntity downloadFile(@AuthenticationPrincipal User user, @PathVariable Integer id) throws IOException {
        Optional<Document> doc = documentRepository.findById(id);
        if (doc.isPresent()) {
            Document document = doc.get();
            File file = new File(document.getPath());//full file path URL
            FileInputStream fis = new FileInputStream(file);
            URLConnection connection = file.toURL().openConnection();
            String mimeType = connection.getContentType();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.valueOf("application/octet-stream"));
            headers.set("Content-Disposition",
                    "attachment;filename="+file.getName());

            logService.CommitEvent(user, document, "Файл скачан");
            return new ResponseEntity<>(fis.readAllBytes(), headers, HttpStatus.OK);
        }

        return (ResponseEntity) ResponseEntity.noContent();
    }

    @GetMapping(path="/getById")
    public @ResponseBody Document getById(@AuthenticationPrincipal User user,
                                          @RequestParam Integer id){
        return documentRepository.findById(id).orElse(null);
    }

    @GetMapping(path="/my")
    public ModelAndView getMyDocuments(@AuthenticationPrincipal User user, Map<String, Object> model) {
        Iterable<Document> documents =  StreamSupport.stream(documentRepository.findAll().spliterator(), false)
                .filter(doc -> doc.getAssignee().getId().equals(user.getId()))
                .collect(Collectors.toList());

        model.put("documents", documents);
        model.put("user", user);
        model.put("onlyMy", true);
        return new ModelAndView("documents", model);
    }
    @GetMapping(path="/all")
    public ModelAndView getAllDocuments(@AuthenticationPrincipal User user, Map<String, Object> model) {
        Iterable<Document> documents = documentRepository.findAll();
        model.put("documents", documents);
        model.put("user", user);
        model.put("onlyMy", false);
        return new ModelAndView("documents", model);
    }

    @GetMapping(path="/add")
    public String addDocument() {
      return "documentAdd";
    }

    @PostMapping(path="/add")
    public String addDoc(@AuthenticationPrincipal User user,
                            Map<String, Object> model,
                            @RequestParam("file") MultipartFile file,
                            @Valid Document document) throws IOException {

        document.setAssignee(user);
        document.setStatus(DocumentStatus.Зарегистрирован);

        saveFile(file, document);
        documentRepository.save(document);

        ActionLog log = new ActionLog();
        log.setAuthor(user);
        log.setDate(new Date());
        log.setDocument(document);
        log.setMessage("Добавлен документ и переведен в статус Зарегистрирован");
        actionLogRepository.save(log);

        return "redirect:/documents/all";
    }

    private void saveFile(@RequestParam("file") MultipartFile file,
                          @Valid Document document) throws IOException {
        if (file != null && !file.getOriginalFilename().isEmpty()) {

            String cc = "C:/worflow";
            File uploadDir = new File(cc);

            if (!uploadDir.exists()) {
                uploadDir.mkdir();
            }
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

            String dateString = format.format( new Date()   );
            String resultFilename = dateString + "___" + file.getOriginalFilename();
            document.setName(resultFilename);
            file.transferTo(new File(cc + "/" + resultFilename));

            document.setPath(cc + "/" + resultFilename);
        }

}}
